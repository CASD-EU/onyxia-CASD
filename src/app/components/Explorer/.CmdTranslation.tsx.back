import { useState, useReducer } from "react";
import { createStyles, makeStyles } from "@material-ui/core/styles";
import Accordion from '@material-ui/core/Accordion';
import AccordionSummary from '@material-ui/core/AccordionSummary';
import AccordionDetails from '@material-ui/core/AccordionDetails';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
//TODO: Refactor this: find a more meaningfully name and detach from SecretManager
import type { NonPostableEvt } from "evt";
import { useEvt } from "evt/hooks";
import { id } from "evt/tools/typeSafety/id";
import memoize from "memoizee";
import { useDOMRect } from "app/utils/hooks/useDOMRect";
import clsx from "clsx";
import MuiCircularProgress from "@material-ui/core/CircularProgress";
import { Button } from "app/components/designSystem/Button";


export type Props = {
	className: string;
	evtTranslation: NonPostableEvt<{
		type: "cmd" | "result";
		cmdId: number;
		translation: string;
	}>;
	/** In pixel */
	maxHeight: number;
};



const useStyles = makeStyles(
	theme => {

		const limeGreen = theme.custom.colors.palette.limeGreen.main;

		return createStyles<
			"root",
			Props 
		>({
			"root": {
			}
		});
	}
);
export function CmdTranslation(props: Props) {

	const { className, evtTranslation } = props;

	const [lastTranslatedCmd, setLastTranslatedCmd] = useState("");

	const [getTranslationHistory] = useState(
		() => memoize(
			(_evtTranslation: Props["evtTranslation"]) =>
				id<{
					cmdId: number;
					cmd: string;
					resp: string | undefined;
				}[]>([])
		)
	);

	const translationHistory = getTranslationHistory(evtTranslation);

	const [, forceUpdate] = useReducer(x => x + 1, 0);

	useEvt(
		ctx => {

			evtTranslation.attach(
				({ type }) => type === "cmd",
				ctx,
				({ cmdId, translation }) => {

					setLastTranslatedCmd(
						translation
							.replace(/\\\n/g, " ")
					);

					translationHistory.push({
						cmdId,
						"cmd": translation,
						"resp": undefined
					});

					forceUpdate();

					evtTranslation.attach(
						translation => translation.cmdId === cmdId,
						ctx,
						({ translation }) => {

							translationHistory
								.find(entry => entry.cmdId === cmdId)!
								.resp = translation;

							forceUpdate();

						}
					);

				}
			);

		},
		[evtTranslation, translationHistory]
	);

	const classes = useStyles(props);

	const [isExpended, toggleIsExpended] = useReducer(isExpended => !isExpended, false);

	return (
		<div>
			<div style={{ "display": "flex" }}>

				<span style={{ "display": "inline-block" }}>$</span>

				<div style={{ "flex": 1 }}>
					<code>
						$ {lastTranslatedCmd}
					</code>
				</div>

				{/* inline block */}
				<Button   onClick={toggleIsExpended} startIcon="info"/>

			</div>

			{ isExpended && 
				<div>

				</div>
			}




		</div>
	);

	return (
		<div ref={rootRef} className={clsx(classes.root, className)}>
			<Accordion
				square={true}
				classes={{
					"expanded": classes.accordionExpanded
				}}
			>
				<AccordionSummary
					ref={accordionSummaryRef}
					classes={{
						"root": classes.accordionSummary,
						"expandIcon": classes.limeGreen
					}}
					expandIcon={<ExpandMoreIcon />}
				>
					<code className={classes.lastCmdCode}>
						$ {lastTranslatedCmd}
					</code>

				</AccordionSummary>
				<AccordionDetails
					classes={{ "root": classes.accordionDetails }}
				>
					<div> {/* div positioned at the bottom*/}
						{translationHistory.map(
							({ cmdId, cmd, resp }) =>
								<div key={cmdId}>
									<pre className={classes.limeGreen}>
										$ {cmd}
									</pre>
									<pre className={classes.white}>
										{"  "}{resp === undefined ?
											<MuiCircularProgress 
												classes={{ "root": classes.circularLoading }} 
												size={10} 
											/>
											: resp}
									</pre>
								</div>
						)}
					</div>
				</AccordionDetails>
			</Accordion>
		</div>
	);

}




