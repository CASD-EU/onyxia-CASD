# Here are defined the environement variables to configure the docker image inseefrlab/onyxia-web.  
# Thoses parameters are mostly related to cosmetic configurations.  
#
# Example of a value.yaml file:
#
# onyxia:
#   web:
#     # Parameters inseefrlab/onyxia-web, you are reading the file where they are defined.
#     env:
#       HEADER_LOGO=https://example.com/logo.svg
#       HEADER_TEXT_BOLD=Your organization
#
# You can omit the REACT_APP_ prefix.






# If true, the default page of the app will be /catalog
REACT_APP_DISABLE_HOMEPAGE=false

# Default: HEADER_LOGO
REACT_APP_HOMEPAGE_LOGO=
# Can be "false" to use no image
REACT_APP_HOMEPAGE_MAIN_ASSET=
REACT_APP_HOMEPAGE_MAIN_ASSET_Y_OFFSET=0
REACT_APP_HOMEPAGE_MAIN_ASSET_X_OFFSET=0
REACT_APP_HOMEPAGE_MAIN_ASSET_SCALE_FACTOR=1

REACT_APP_HOMEPAGE_TITLE=
REACT_APP_HOMEPAGE_TITLE_AUTHENTICATED=

REACT_APP_HOMEPAGE_SUBTITLE=
REACT_APP_HOMEPAGE_SUBTITLE_AUTHENTICATED=

REACT_APP_HOMEPAGE_CALL_TO_ACTION_BUTTON=
REACT_APP_HOMEPAGE_CALL_TO_ACTION_BUTTON_AUTHENTICATED=

REACT_APP_HOMEPAGE_CARDS=


# To add external links in the left bar.
#
# 'icon' can either be a Material Design icon name or a URL to an SVG.
# The complete list of icons is available here: https://mui.com/material-ui/material-icons
# For example "DataSaverOn" correspond to https://mui.com/material-ui/material-icons/?query=data&selected=DataSaverOn
# 
# 'label' can either be a string or a map language iso2 -> text.
#
# Example:
#
# EXTRA_LEFTBAR_ITEMS: |
#     [
#       {
#         "label": "My catalog"
#         "icon": "DataSaverOn", 
#         "url": "/catalog/automation" 
#       },
#       { 
#         "label": { 
#           "en": "Tutorials",
#           "fr": "Tutoriels"
#         }, 
#         "icon": "https://www.sspcloud.fr/trainings.svg", 
#         "url": "https://www.sspcloud.fr/formation" 
#       }
#     ]
#
REACT_APP_EXTRA_LEFTBAR_ITEMS=

# Same format as the EXTRA_LEFTBAR_ITEMS but for the custom links in the header.
# https://user-images.githubusercontent.com/6702424/152692462-33a8589e-485f-45c9-93c7-0b945980aaf5.png
#
REACT_APP_HEADER_LINKS=



# =============================================================================
# Theme and branding - Customize the look of the app, make it your own!
# =============================================================================

# Define the logo that appears in the header
# See: https://github.com/InseeFrLab/onyxia/assets/6702424/a9bbdc99-db29-4a7e-9e00-ca759c00e3fa
# 
# Type: ThemedAssetUrl
# An ThemedAssetUrl is a link to an image that can either be vectorial (.svg) or matricial (.webp, .png, .jpg, etc.)
# 
# Examples: 
#
# HEADER_LOGO: https://example.com/logo.svg
# or
# HEADER_LOGO: https://example.com/logo.webp
#
# Aternatively you can provides different varian of an asset to be used depending on if the user is in dark mode or not:  
#
# HEADER_LOGO: |
#   {
#     "light": "https://example.com/logo-light.webp",
#     "dark": "https://example.com/logo-dark.webp"
#   }
# 
# When you use an SVG file, which is recommended, you can apply some special classes to enable onyxia to dynamically apply the correct
# collors depending on the palette enabled and if the user is in dark mode or not.  
#
# Available classes are:
#   - focus-color-fill (Correspond to Orange in the default palette)
#   - text-color-fill (Correspond to a black when the user is in light mode and to a white when the user is in dark mode)
#   - surface-color-fill (Correspond to a white when the user is in light mode and to a black when the user is in dark mode)
#   - background-color-fill (Correspond to a whiter white when the user is in light mode and to a blacker black when the user is in dark mode)
#
# You can apply theses classes on the root of your SVG on on any <g> element:  
# See the default Onyxia logo for example: https://github.com/InseeFrLab/onyxia/blob/main/web/public/logo.svg?short_path=bceaf10
# 
REACT_APP_HEADER_LOGO=%PUBLIC_URL%/logo.svg

# The parameters defines if 'Onyxia -' in the header should be hidden
# See https://user-images.githubusercontent.com/6702424/152916796-f93de2e4-b3d8-4214-bb01-628704562421.png
# 
# Type: true or false
#
REACT_APP_HEADER_HIDE_ONYXIA=false 

# This parameter enable to defines the text that is rendered in bold in the header
# See: https://user-images.githubusercontent.com/6702424/152652494-7c2e2515-23f2-4b06-bd9f-15c00173bb66.png
# 
# Type: string
#
# Example:
#
# HEADER_TEXT_BOLD: My Organization
#
REACT_APP_HEADER_TEXT_BOLD=

# This parameter is for defning the text of the header that is rendered with the focus color of your palette 
# See: https://user-images.githubusercontent.com/6702424/152652533-b97512ca-f6f4-4aa8-a91f-96988181902c.png
#
REACT_APP_HEADER_TEXT_FOCUS=Datalab

# This parameter allows you to override some, or all, of the color palette.
#
# Should you desire to personalize the color palette without the assistance of a UI designer, 
# there is a simple way. You can copy and paste the default palette and request ChatGPT to 
# propose a variation. For instance, you might want to emphasize a specific color, like 
# "TypeScript's blue". ChatGPT can use that as a reference to generate a new color scheme 
# tailored to your preference.
#
# Type: DeepPartial<typeof defaultPalette>
# See: https://github.com/InseeFrLab/onyxia-ui/blob/0fa8667227aac328cb685cc140f3cd2186956304/src/lib/color.ts#L15-L53
#
# Example:  
#
# PALETTE_OVERRIDE: |
#   { 
#     "focus": { 
#         "main": "#00824D", 
#         "light": "#00824D",
#         "light2": "#00FFC2"
#     } 
#   }
#
REACT_APP_PALETTE_OVERRIDE=

# For customizing the font used in the webapp
#
# You must provide at least the normal width 400 (normal), 
# 500, 600 and 700 (bold) variants of the font width will be used if you provide them.
# Optionally you can also provide italic variant for each width.  
#
# Example: 
# 
# FONT: |
#   { 
#     "fontFamily": "Geist", 
#     "dirUrl": "https://www.onyxia.sh/fonts/Geist", 
#     "400": "Geist-Regular.woff2",
#     "500": "Geist-Medium.woff2",
#     "600": "Geist-SemiBold.woff2",
#     "700": "Geist-Bold.woff2"
#   }
#
# Onyxia comes with two built-in font that you are welcome to use:
#
# Work Sans: 
# https://fonts.google.com/specimen/Work+Sans 
# This is the font that is used by default.
#
# Geist:
# https://vercel.com/font  
# Enables it using:  
# FONT: |
#   { 
#     "fontFamily": "Geist", 
#     "dirUrl": "%PUBLIC_URL%/fonts/Geist", 
#     "400": "Geist-Regular.woff2",
#     "500": "Geist-Medium.woff2",
#     "600": "Geist-SemiBold.woff2",
#     "700": "Geist-Bold.woff2"
#   }
#
REACT_APP_FONT={ "fontFamily": "Work Sans", "dirUrl": "%PUBLIC_URL%/fonts/WorkSans", "400": "worksans-regular-webfont.woff2", "500": "worksans-medium-webfont.woff2", "600": "worksans-semibold-webfont.woff2", "700": "worksans-bold-webfont.woff2" }

# This parameter let you customize the splash screen that is displayed when the app is loading.
# See: https://github.com/InseeFrLab/onyxia/assets/6702424/40369e77-acb5-4c21-b9c2-4681a1594268  
# By default the image that is used is the HEADER_LOGO.
#
# Type: ThemedAssetUrl
# See the HEADER_LOGO for documentation about the ThemedAssetUrl type.
#
# Example:
#
# SPLASHSCREEN_LOGO: https://example.com/logo.svg
#
# Configuring the animation: 
# If you use an image that is not an SVG, the the image will automatically be animated with a blinking effect.  
# If you use an SVG, by default the image will be still.  
# You can make it blink by applying the class "splashscreen-animation" to the root of your SVG.
# Alternatively you can apply "splashscreen-animation-group1" 2 and 3 to <g> elements of your SVG to make them blink in a different rythm.  
# See the default Onyxia logo for example: https://github.com/InseeFrLab/onyxia/blob/main/web/public/logo.svg?short_path=bceaf10
#
REACT_APP_SPLASHSCREEN_LOGO=

# This parameter let you change the size of the splash screen logo.  
#
# Type: number
#
# Examples:
# If you think that, by default the logo is too small, you can use this to make it 20% biger:  
#
# SPLASHSCREEN_LOGO_SCALE_FACTOR=1.2
#
# On the contrary if you thik it's too big you can make it 20% smaller with:  
#
# SPLASHSCREEN_LOGO_SCALE_FACTOR=0.8
#
REACT_APP_SPLASHSCREEN_LOGO_SCALE_FACTOR=1

# Favicon of the webapp, it's the icon that is displayed in the browser tab.
# See: https://github.com/InseeFrLab/onyxia/assets/6702424/980987a6-be87-43de-9a1b-cf5cd3f8d435
# By default the HEADER_LOGO get used.
#
# Type: ThemedAssetUrl - See HEADER_LOGO
#
# Examples: See HEADER_LOGO
#
REACT_APP_FAVICON=

# For configuring the text that is displayed in the browser tab.
# see: https://github.com/InseeFrLab/onyxia/assets/6702424/180e9edb-cbd9-433c-a8a8-708394fda89f
#
# Type: string
#
REACT_APP_TAB_TITLE=Onyxia

# Title of the social card.
# see: https://github.com/InseeFrLab/onyxia/assets/6702424/256b847a-ddae-400d-b585-a702b2e2253a
# The social media card gets displayed when you share the link of your Onyxia instance on social media.
#
# Type: string
#
REACT_APP_SOCIAL_MEDIA_TITLE=Onyxia

# Description text of the social card.
# see: https://user-images.githubusercontent.com/6702424/152668805-d1e055e0-2d9d-4b6c-9bc7-fba0093855aa.png
#
# Type: string
#
REACT_APP_SOCIAL_MEDIA_DESCRIPTION=Shared platform for statistical data processing and data science services

# Image of displayed in the social media card.
# See: https://github.com/InseeFrLab/onyxia/assets/6702424/806ffd48-f657-4ebf-9b0d-a95de2c53459
#
# Type: string
#
# Example:  
#
# SOCIAL_MEDIA_IMAGE: https://example.com/preview-onyxia.png
#
REACT_APP_SOCIAL_MEDIA_IMAGE=%PUBLIC_URL%/preview-onyxia.png

# Parameter to customize the image that gets displayed in the background of the hompage
# and in the login pages if you are using the Onyxia Keycloak theme.
# See: https://github.com/InseeFrLab/onyxia/assets/6702424/ec5cd974-e5fa-43a4-a14e-cfe1bdb3f946
# and: https://github.com/InseeFrLab/onyxia/assets/6702424/b5abfa70-c928-437d-9528-452f41a8f590  
#
# Type: ThemedAssetUrl or false - See HEADER_LOGO for documentation and examples.  
# 
# You if you set it to false the background image will be disabled.
#
# Examples:  
#
# BACKGROUND_ASSET: false
# or
# BACKGROUND_ASSET: |
#   {
#     "light": "https://example.com/background-light.webp",
#     "dark": "https://example.com/background-dark.webp"
#   }
#
REACT_APP_BACKGROUND_ASSET=

# =============================================================================
# Non cosmetic parameters - Enables to configures some behaviors of the app
# =============================================================================

# In the footer there is a "Terms of services" link.
# See: https://github.com/InseeFrLab/onyxia/assets/6702424/cdaefd0c-5567-49fc-9e55-f90cc0893ad6
# This parameter enables you to configures the Markdown that'll get displayed when the user click on the link.  
# If you use the Onyxia Keycloak theme, you can configure your Keycloak instance so that the user will have to 
# explicitly accept the terms of services before being able to use the platform.
# See: https://docs.onyxia.sh/#enabling-user-authentication
#
# Type: LocalizedString
# 
# Examples:  
#
# TERMS_OF_SERVICES: https://www.sspcloud.fr/tos_en.md
#
# or
#
# TERMS_OF_SERVICES: |
#   {
#     "en": "https://sspcloud.fr/tos_en.md",
#     "fr": "https://sspcloud.fr/tos_fr.md" 
#   }
# 
REACT_APP_TERMS_OF_SERVICES=

# Enable to share a communication message to all your users, it will be displayed in a banner on the top of the page.
# https://github.com/inseefrlab/onyxia/assets/6702424/5c3345a6-b3e1-4620-af21-d8a4dad72af9
#
# Examples:
#
# GLOBAL_ALERT: "See what's **new**! [Blog post](https://example.com)!"
#
# You can also provide a severity among info, success, warning, error
#
# GLOBAL_ALERT: |
#   {
#     "severity": "success", 
#     "message": "See what's **new**! [Blog post](https://example.com)!"
#   }
#
# You can localize the message by providing a map language iso2 -> message
#
# GLOBAL_ALERT: |
#   {
#     "en": "See what's **new**! [Blog post](https://example.com)!",
#     "fr": "Voyez ce qui est **nouveau**! [Article de blog](https://example.fr)!"
#   }
#
# It works the same when you have a severity
#
# GLOBAL_ALERT: |
#   {
#     "severity": "success",
#     "message": {
#       "en": "See what's **new**! [Blog post](https://example.com)!",
#       "fr": "Voyez ce qui est **nouveau**! [Article de blog](https://example.fr)!"
#     }
#   }
#
REACT_APP_GLOBAL_ALERT=

# Onyxia comes by default with support for many languages.
# This parameter enables you to selectively enable a subset of language.  
# If you don't plan to provide any translation for customizable texts like GLOBAL_ALERT or HOMEPAGE_TITLE,
# It's a good idea to only enable your language or to provide a list where you main language comes first.    
# For example if you set ENABLED_LANGUAGES=fr,en then when you provide a non internationalized text onyxia will be able
# to label it as French for screen readers.  
#
# Type: Comma separated list of language iso2 codes. 
# See supported language list here: https://github.com/InseeFrLab/onyxia/blob/main/web/src/core/ports/OnyxiaApi/Language.ts
# (Make sure you check the version of the source code for the version you are using)
#
# Example: 
#
# ENABLED_LANGUAGES: fr,en
# 
REACT_APP_ENABLED_LANGUAGES=

# To hide the command bar by default, 
# it can be enabled back in the account page by the user.  
# For reference this is the command bar: https://github.com/InseeFrLab/onyxia/assets/6702424/474da82c-a0e1-4107-acf7-84870aab9f78
# 
# Type: true or false
#
REACT_APP_DISABLE_COMMAND_BAR=false

# When this variable is set to true, it disables the injection of personal information
# into the Onyxia values for group projects. Specifically, it prevents:
# - Git credentials from being injected
# - Vault credentials from being injected
# - S3 credentials from being injected
# - Kaggle token from being injected
#
# To enable this security feature, set the value to 'true'.
#
# Type: true or false
#
REACT_APP_DISABLE_PERSONAL_INFOS_INJECTION_IN_GROUP=false

# The parameter controls the automatic service 
# launching behavior of Onyxia based on URL query parameters. When set to true,
# the "autoLaunch" feature is disabled, enhancing the security of the platform
# by requiring users to manually launch services.
#
# Context:
# - AutoLaunch Feature: Onyxia allows sharing URLs that encode a particular
#   service configuration. These URLs support an autoLaunch=true query parameter
#   that triggers automatic service launch upon user authentication.
# - Use Case: Our training platform (https://www.sspcloud.fr/formation) makes 
#   heavy use of this feature for seamless integration between the course catalog
#   and Onyxia instances.
#
# Security Concerns:
# The autoLaunch feature may introduce security vulnerabilities as the URL can
# be configured to execute scripts within the user's Kubernetes namespace.
#
# Behavior:
# - When DISABLE_AUTO_LAUNCH=true:
#   - The "autoLaunch" feature is deactivated.
#   - Users clicking a URL with autoLaunch=true will see a message prompting them
#     to review service parameters. The message cautions: "Someone might be attempting 
#     to get access to your cluster information. Make sure everything looks good,
#     particularly check for any suspicious initialization scripts."
#   - Users must manually launch services, offering a chance to review parameters.
# - When DISABLE_AUTO_LAUNCH=false (Default):
#   - The "autoLaunch" feature is active.
#   - Services are automatically launched based on URL configuration post-authentication.
#   - Note: To enhance security, you can define an x-security pattern in your catalog 
#     options. This allows fine-tuning of what's considered a sensitive parameter.
#     If such a parameter is changed, auto-launch is prevented. Documentation for
#     the x-security feature is forthcoming.
#
# Type: true or false
#
REACT_APP_DISABLE_AUTO_LAUNCH=false

# ==================================================================================
# Private parameters - Not expected to be configured by the instance administrator
# ==================================================================================

# It defines the version number as seen in the footer
# https://github.com/InseeFrLab/onyxia/assets/6702424/e026697a-bc59-4f10-b968-e2b389f8e9c1
# *_URL defines the url toward wich the user is redirected when the version number is clicked.  
# Thoses two parameters ares set automatically by the Helm chart.
REACT_APP_ONYXIA_VERSION=
REACT_APP_ONYXIA_VERSION_URL=

# This is to be configured if you want to spin up a local instance of onyxia-web
# and connect to a remote instance of onyxia-api.
# You would set for example REACT_APP_ONYXIA_API_URL=https://datalab.sspcloud.fr/api
REACT_APP_ONYXIA_API_URL=/api

GENERATE_SOURCEMAP=true